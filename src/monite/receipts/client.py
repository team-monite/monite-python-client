# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.currency_enum import CurrencyEnum
from ..types.order_enum import OrderEnum
from ..types.receipt_cursor_fields import ReceiptCursorFields
from ..types.receipt_line_item_cursor_fields import ReceiptLineItemCursorFields
from ..types.receipt_line_item_response_schema import ReceiptLineItemResponseSchema
from ..types.receipt_line_items_pagination_response import ReceiptLineItemsPaginationResponse
from ..types.receipt_pagination_response import ReceiptPaginationResponse
from ..types.receipt_response_schema import ReceiptResponseSchema
from .raw_client import AsyncRawReceiptsClient, RawReceiptsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ReceiptsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawReceiptsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawReceiptsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawReceiptsClient
        """
        return self._raw_client

    def get_receipts(
        self,
        *,
        order: typing.Optional[OrderEnum] = None,
        limit: typing.Optional[int] = None,
        pagination_token: typing.Optional[str] = None,
        sort: typing.Optional[ReceiptCursorFields] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_gte: typing.Optional[dt.datetime] = None,
        created_at_lte: typing.Optional[dt.datetime] = None,
        id_in: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        currency: typing.Optional[CurrencyEnum] = None,
        document_id: typing.Optional[str] = None,
        document_id_contains: typing.Optional[str] = None,
        document_id_icontains: typing.Optional[str] = None,
        total_amount_gt: typing.Optional[int] = None,
        total_amount_lt: typing.Optional[int] = None,
        total_amount_gte: typing.Optional[int] = None,
        total_amount_lte: typing.Optional[int] = None,
        has_file: typing.Optional[bool] = None,
        has_transaction: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptPaginationResponse:
        """
        Parameters
        ----------
        order : typing.Optional[OrderEnum]
            Sort order (ascending by default). Typically used together with the `sort` parameter.

        limit : typing.Optional[int]
            The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.

        pagination_token : typing.Optional[str]
            A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.

            If not specified, the first page of results will be returned.

        sort : typing.Optional[ReceiptCursorFields]
            The field to sort the results by. Typically used together with the `order` parameter.

        created_at_gt : typing.Optional[dt.datetime]

        created_at_lt : typing.Optional[dt.datetime]

        created_at_gte : typing.Optional[dt.datetime]

        created_at_lte : typing.Optional[dt.datetime]

        id_in : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        currency : typing.Optional[CurrencyEnum]

        document_id : typing.Optional[str]

        document_id_contains : typing.Optional[str]

        document_id_icontains : typing.Optional[str]

        total_amount_gt : typing.Optional[int]

        total_amount_lt : typing.Optional[int]

        total_amount_gte : typing.Optional[int]

        total_amount_lte : typing.Optional[int]

        has_file : typing.Optional[bool]

        has_transaction : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptPaginationResponse
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.get_receipts()
        """
        _response = self._raw_client.get_receipts(
            order=order,
            limit=limit,
            pagination_token=pagination_token,
            sort=sort,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            id_in=id_in,
            currency=currency,
            document_id=document_id,
            document_id_contains=document_id_contains,
            document_id_icontains=document_id_icontains,
            total_amount_gt=total_amount_gt,
            total_amount_lt=total_amount_lt,
            total_amount_gte=total_amount_gte,
            total_amount_lte=total_amount_lte,
            has_file=has_file,
            has_transaction=has_transaction,
            request_options=request_options,
        )
        return _response.data

    def post_receipts(
        self,
        *,
        base64encoded_file: typing.Optional[str] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        document_id: typing.Optional[str] = OMIT,
        issued_at: typing.Optional[dt.datetime] = OMIT,
        merchant_location: typing.Optional[str] = OMIT,
        merchant_name: typing.Optional[str] = OMIT,
        total_amount: typing.Optional[int] = OMIT,
        transaction_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptResponseSchema:
        """
        Parameters
        ----------
        base64encoded_file : typing.Optional[str]
            Base64-encoded contents of the original receipt file.

        currency : typing.Optional[CurrencyEnum]
            Currency code used in the receipt.

        document_id : typing.Optional[str]
            Unique receipt number assigned by the issuer.

        issued_at : typing.Optional[dt.datetime]
            Receipt issued date and time.

        merchant_location : typing.Optional[str]
            Location of the merchant.

        merchant_name : typing.Optional[str]
            Name of the merchant.

        total_amount : typing.Optional[int]
            Total amount for the receipt in minor units (e.g. cents).

        transaction_id : typing.Optional[str]
            Transaction ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.post_receipts()
        """
        _response = self._raw_client.post_receipts(
            base64encoded_file=base64encoded_file,
            currency=currency,
            document_id=document_id,
            issued_at=issued_at,
            merchant_location=merchant_location,
            merchant_name=merchant_name,
            total_amount=total_amount,
            transaction_id=transaction_id,
            request_options=request_options,
        )
        return _response.data

    def post_receipts_upload_from_file(
        self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> ReceiptResponseSchema:
        """
        Upload an incoming receipt in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.post_receipts_upload_from_file()
        """
        _response = self._raw_client.post_receipts_upload_from_file(file=file, request_options=request_options)
        return _response.data

    def get_receipts_id(
        self, receipt_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ReceiptResponseSchema:
        """
        Parameters
        ----------
        receipt_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.get_receipts_id(
            receipt_id="receipt_id",
        )
        """
        _response = self._raw_client.get_receipts_id(receipt_id, request_options=request_options)
        return _response.data

    def delete_receipts_id(self, receipt_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        receipt_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.delete_receipts_id(
            receipt_id="receipt_id",
        )
        """
        _response = self._raw_client.delete_receipts_id(receipt_id, request_options=request_options)
        return _response.data

    def patch_receipts_id(
        self,
        receipt_id: str,
        *,
        base64encoded_file: typing.Optional[str] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        document_id: typing.Optional[str] = OMIT,
        issued_at: typing.Optional[dt.datetime] = OMIT,
        merchant_location: typing.Optional[str] = OMIT,
        merchant_name: typing.Optional[str] = OMIT,
        total_amount: typing.Optional[int] = OMIT,
        transaction_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptResponseSchema:
        """
        Parameters
        ----------
        receipt_id : str

        base64encoded_file : typing.Optional[str]
            Base64-encoded file contents.

        currency : typing.Optional[CurrencyEnum]
            Currency code.

        document_id : typing.Optional[str]
            Receipt number.

        issued_at : typing.Optional[dt.datetime]
            Date when the receipt was issued.

        merchant_location : typing.Optional[str]
            Merchant location.

        merchant_name : typing.Optional[str]
            Merchant name.

        total_amount : typing.Optional[int]
            Total amount.

        transaction_id : typing.Optional[str]
            Transaction ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.patch_receipts_id(
            receipt_id="receipt_id",
        )
        """
        _response = self._raw_client.patch_receipts_id(
            receipt_id,
            base64encoded_file=base64encoded_file,
            currency=currency,
            document_id=document_id,
            issued_at=issued_at,
            merchant_location=merchant_location,
            merchant_name=merchant_name,
            total_amount=total_amount,
            transaction_id=transaction_id,
            request_options=request_options,
        )
        return _response.data

    def post_receipts_id_attach_file(
        self, receipt_id: str, *, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> ReceiptResponseSchema:
        """
        Attach file to receipt without existing attachment.

        Parameters
        ----------
        receipt_id : str

        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.post_receipts_id_attach_file(
            receipt_id="receipt_id",
        )
        """
        _response = self._raw_client.post_receipts_id_attach_file(
            receipt_id, file=file, request_options=request_options
        )
        return _response.data

    def get_receipts_id_line_items(
        self,
        receipt_id: str,
        *,
        order: typing.Optional[OrderEnum] = None,
        limit: typing.Optional[int] = None,
        pagination_token: typing.Optional[str] = None,
        sort: typing.Optional[ReceiptLineItemCursorFields] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_gte: typing.Optional[dt.datetime] = None,
        created_at_lte: typing.Optional[dt.datetime] = None,
        name: typing.Optional[str] = None,
        name_iexact: typing.Optional[str] = None,
        name_contains: typing.Optional[str] = None,
        name_icontains: typing.Optional[str] = None,
        total_gt: typing.Optional[int] = None,
        total_lt: typing.Optional[int] = None,
        total_gte: typing.Optional[int] = None,
        total_lte: typing.Optional[int] = None,
        created_by_user_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptLineItemsPaginationResponse:
        """
        Parameters
        ----------
        receipt_id : str

        order : typing.Optional[OrderEnum]
            Sort order (ascending by default). Typically used together with the `sort` parameter.

        limit : typing.Optional[int]
            The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.

        pagination_token : typing.Optional[str]
            A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.

            If not specified, the first page of results will be returned.

        sort : typing.Optional[ReceiptLineItemCursorFields]
            The field to sort the results by. Typically used together with the `order` parameter.

        created_at_gt : typing.Optional[dt.datetime]

        created_at_lt : typing.Optional[dt.datetime]

        created_at_gte : typing.Optional[dt.datetime]

        created_at_lte : typing.Optional[dt.datetime]

        name : typing.Optional[str]

        name_iexact : typing.Optional[str]

        name_contains : typing.Optional[str]

        name_icontains : typing.Optional[str]

        total_gt : typing.Optional[int]

        total_lt : typing.Optional[int]

        total_gte : typing.Optional[int]

        total_lte : typing.Optional[int]

        created_by_user_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptLineItemsPaginationResponse
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.get_receipts_id_line_items(
            receipt_id="receipt_id",
        )
        """
        _response = self._raw_client.get_receipts_id_line_items(
            receipt_id,
            order=order,
            limit=limit,
            pagination_token=pagination_token,
            sort=sort,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            name=name,
            name_iexact=name_iexact,
            name_contains=name_contains,
            name_icontains=name_icontains,
            total_gt=total_gt,
            total_lt=total_lt,
            total_gte=total_gte,
            total_lte=total_lte,
            created_by_user_id=created_by_user_id,
            request_options=request_options,
        )
        return _response.data

    def post_receipts_id_line_items(
        self,
        receipt_id: str,
        *,
        accounting_tax_rate_id: typing.Optional[str] = OMIT,
        cost_center_id: typing.Optional[str] = OMIT,
        general_ledger_id: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        total: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptLineItemResponseSchema:
        """
        Parameters
        ----------
        receipt_id : str

        accounting_tax_rate_id : typing.Optional[str]
            Accounting tax rate ID.

        cost_center_id : typing.Optional[str]
            Cost center ID.

        general_ledger_id : typing.Optional[str]
            General ledger ID.

        name : typing.Optional[str]
            Line item name/description.

        total : typing.Optional[int]
            Line item total in minor units.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptLineItemResponseSchema
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.post_receipts_id_line_items(
            receipt_id="receipt_id",
        )
        """
        _response = self._raw_client.post_receipts_id_line_items(
            receipt_id,
            accounting_tax_rate_id=accounting_tax_rate_id,
            cost_center_id=cost_center_id,
            general_ledger_id=general_ledger_id,
            name=name,
            total=total,
            request_options=request_options,
        )
        return _response.data

    def delete_receipts_id_line_items_id(
        self, receipt_id: str, line_item_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        receipt_id : str

        line_item_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.delete_receipts_id_line_items_id(
            receipt_id="receipt_id",
            line_item_id="line_item_id",
        )
        """
        _response = self._raw_client.delete_receipts_id_line_items_id(
            receipt_id, line_item_id, request_options=request_options
        )
        return _response.data

    def patch_receipts_id_line_items_id(
        self,
        receipt_id: str,
        line_item_id: str,
        *,
        accounting_tax_rate_id: typing.Optional[str] = OMIT,
        cost_center_id: typing.Optional[str] = OMIT,
        general_ledger_id: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        total: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptLineItemResponseSchema:
        """
        Parameters
        ----------
        receipt_id : str

        line_item_id : str

        accounting_tax_rate_id : typing.Optional[str]
            Accounting tax rate ID.

        cost_center_id : typing.Optional[str]
            Cost center ID.

        general_ledger_id : typing.Optional[str]
            General ledger ID.

        name : typing.Optional[str]
            Line item name/description.

        total : typing.Optional[int]
            Line item total in minor units.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptLineItemResponseSchema
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.receipts.patch_receipts_id_line_items_id(
            receipt_id="receipt_id",
            line_item_id="line_item_id",
        )
        """
        _response = self._raw_client.patch_receipts_id_line_items_id(
            receipt_id,
            line_item_id,
            accounting_tax_rate_id=accounting_tax_rate_id,
            cost_center_id=cost_center_id,
            general_ledger_id=general_ledger_id,
            name=name,
            total=total,
            request_options=request_options,
        )
        return _response.data


class AsyncReceiptsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawReceiptsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawReceiptsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawReceiptsClient
        """
        return self._raw_client

    async def get_receipts(
        self,
        *,
        order: typing.Optional[OrderEnum] = None,
        limit: typing.Optional[int] = None,
        pagination_token: typing.Optional[str] = None,
        sort: typing.Optional[ReceiptCursorFields] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_gte: typing.Optional[dt.datetime] = None,
        created_at_lte: typing.Optional[dt.datetime] = None,
        id_in: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        currency: typing.Optional[CurrencyEnum] = None,
        document_id: typing.Optional[str] = None,
        document_id_contains: typing.Optional[str] = None,
        document_id_icontains: typing.Optional[str] = None,
        total_amount_gt: typing.Optional[int] = None,
        total_amount_lt: typing.Optional[int] = None,
        total_amount_gte: typing.Optional[int] = None,
        total_amount_lte: typing.Optional[int] = None,
        has_file: typing.Optional[bool] = None,
        has_transaction: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptPaginationResponse:
        """
        Parameters
        ----------
        order : typing.Optional[OrderEnum]
            Sort order (ascending by default). Typically used together with the `sort` parameter.

        limit : typing.Optional[int]
            The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.

        pagination_token : typing.Optional[str]
            A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.

            If not specified, the first page of results will be returned.

        sort : typing.Optional[ReceiptCursorFields]
            The field to sort the results by. Typically used together with the `order` parameter.

        created_at_gt : typing.Optional[dt.datetime]

        created_at_lt : typing.Optional[dt.datetime]

        created_at_gte : typing.Optional[dt.datetime]

        created_at_lte : typing.Optional[dt.datetime]

        id_in : typing.Optional[typing.Union[str, typing.Sequence[str]]]

        currency : typing.Optional[CurrencyEnum]

        document_id : typing.Optional[str]

        document_id_contains : typing.Optional[str]

        document_id_icontains : typing.Optional[str]

        total_amount_gt : typing.Optional[int]

        total_amount_lt : typing.Optional[int]

        total_amount_gte : typing.Optional[int]

        total_amount_lte : typing.Optional[int]

        has_file : typing.Optional[bool]

        has_transaction : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptPaginationResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.get_receipts()


        asyncio.run(main())
        """
        _response = await self._raw_client.get_receipts(
            order=order,
            limit=limit,
            pagination_token=pagination_token,
            sort=sort,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            id_in=id_in,
            currency=currency,
            document_id=document_id,
            document_id_contains=document_id_contains,
            document_id_icontains=document_id_icontains,
            total_amount_gt=total_amount_gt,
            total_amount_lt=total_amount_lt,
            total_amount_gte=total_amount_gte,
            total_amount_lte=total_amount_lte,
            has_file=has_file,
            has_transaction=has_transaction,
            request_options=request_options,
        )
        return _response.data

    async def post_receipts(
        self,
        *,
        base64encoded_file: typing.Optional[str] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        document_id: typing.Optional[str] = OMIT,
        issued_at: typing.Optional[dt.datetime] = OMIT,
        merchant_location: typing.Optional[str] = OMIT,
        merchant_name: typing.Optional[str] = OMIT,
        total_amount: typing.Optional[int] = OMIT,
        transaction_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptResponseSchema:
        """
        Parameters
        ----------
        base64encoded_file : typing.Optional[str]
            Base64-encoded contents of the original receipt file.

        currency : typing.Optional[CurrencyEnum]
            Currency code used in the receipt.

        document_id : typing.Optional[str]
            Unique receipt number assigned by the issuer.

        issued_at : typing.Optional[dt.datetime]
            Receipt issued date and time.

        merchant_location : typing.Optional[str]
            Location of the merchant.

        merchant_name : typing.Optional[str]
            Name of the merchant.

        total_amount : typing.Optional[int]
            Total amount for the receipt in minor units (e.g. cents).

        transaction_id : typing.Optional[str]
            Transaction ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.post_receipts()


        asyncio.run(main())
        """
        _response = await self._raw_client.post_receipts(
            base64encoded_file=base64encoded_file,
            currency=currency,
            document_id=document_id,
            issued_at=issued_at,
            merchant_location=merchant_location,
            merchant_name=merchant_name,
            total_amount=total_amount,
            transaction_id=transaction_id,
            request_options=request_options,
        )
        return _response.data

    async def post_receipts_upload_from_file(
        self, *, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> ReceiptResponseSchema:
        """
        Upload an incoming receipt in PDF, PNG, or JPEG format and scan its contents. The maximum file size is 20MB.

        Parameters
        ----------
        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.post_receipts_upload_from_file()


        asyncio.run(main())
        """
        _response = await self._raw_client.post_receipts_upload_from_file(file=file, request_options=request_options)
        return _response.data

    async def get_receipts_id(
        self, receipt_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> ReceiptResponseSchema:
        """
        Parameters
        ----------
        receipt_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.get_receipts_id(
                receipt_id="receipt_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_receipts_id(receipt_id, request_options=request_options)
        return _response.data

    async def delete_receipts_id(
        self, receipt_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        receipt_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.delete_receipts_id(
                receipt_id="receipt_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_receipts_id(receipt_id, request_options=request_options)
        return _response.data

    async def patch_receipts_id(
        self,
        receipt_id: str,
        *,
        base64encoded_file: typing.Optional[str] = OMIT,
        currency: typing.Optional[CurrencyEnum] = OMIT,
        document_id: typing.Optional[str] = OMIT,
        issued_at: typing.Optional[dt.datetime] = OMIT,
        merchant_location: typing.Optional[str] = OMIT,
        merchant_name: typing.Optional[str] = OMIT,
        total_amount: typing.Optional[int] = OMIT,
        transaction_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptResponseSchema:
        """
        Parameters
        ----------
        receipt_id : str

        base64encoded_file : typing.Optional[str]
            Base64-encoded file contents.

        currency : typing.Optional[CurrencyEnum]
            Currency code.

        document_id : typing.Optional[str]
            Receipt number.

        issued_at : typing.Optional[dt.datetime]
            Date when the receipt was issued.

        merchant_location : typing.Optional[str]
            Merchant location.

        merchant_name : typing.Optional[str]
            Merchant name.

        total_amount : typing.Optional[int]
            Total amount.

        transaction_id : typing.Optional[str]
            Transaction ID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.patch_receipts_id(
                receipt_id="receipt_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch_receipts_id(
            receipt_id,
            base64encoded_file=base64encoded_file,
            currency=currency,
            document_id=document_id,
            issued_at=issued_at,
            merchant_location=merchant_location,
            merchant_name=merchant_name,
            total_amount=total_amount,
            transaction_id=transaction_id,
            request_options=request_options,
        )
        return _response.data

    async def post_receipts_id_attach_file(
        self, receipt_id: str, *, file: core.File, request_options: typing.Optional[RequestOptions] = None
    ) -> ReceiptResponseSchema:
        """
        Attach file to receipt without existing attachment.

        Parameters
        ----------
        receipt_id : str

        file : core.File
            See core.File for more documentation

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptResponseSchema
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.post_receipts_id_attach_file(
                receipt_id="receipt_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_receipts_id_attach_file(
            receipt_id, file=file, request_options=request_options
        )
        return _response.data

    async def get_receipts_id_line_items(
        self,
        receipt_id: str,
        *,
        order: typing.Optional[OrderEnum] = None,
        limit: typing.Optional[int] = None,
        pagination_token: typing.Optional[str] = None,
        sort: typing.Optional[ReceiptLineItemCursorFields] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_gte: typing.Optional[dt.datetime] = None,
        created_at_lte: typing.Optional[dt.datetime] = None,
        name: typing.Optional[str] = None,
        name_iexact: typing.Optional[str] = None,
        name_contains: typing.Optional[str] = None,
        name_icontains: typing.Optional[str] = None,
        total_gt: typing.Optional[int] = None,
        total_lt: typing.Optional[int] = None,
        total_gte: typing.Optional[int] = None,
        total_lte: typing.Optional[int] = None,
        created_by_user_id: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptLineItemsPaginationResponse:
        """
        Parameters
        ----------
        receipt_id : str

        order : typing.Optional[OrderEnum]
            Sort order (ascending by default). Typically used together with the `sort` parameter.

        limit : typing.Optional[int]
            The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.

        pagination_token : typing.Optional[str]
            A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.

            If not specified, the first page of results will be returned.

        sort : typing.Optional[ReceiptLineItemCursorFields]
            The field to sort the results by. Typically used together with the `order` parameter.

        created_at_gt : typing.Optional[dt.datetime]

        created_at_lt : typing.Optional[dt.datetime]

        created_at_gte : typing.Optional[dt.datetime]

        created_at_lte : typing.Optional[dt.datetime]

        name : typing.Optional[str]

        name_iexact : typing.Optional[str]

        name_contains : typing.Optional[str]

        name_icontains : typing.Optional[str]

        total_gt : typing.Optional[int]

        total_lt : typing.Optional[int]

        total_gte : typing.Optional[int]

        total_lte : typing.Optional[int]

        created_by_user_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptLineItemsPaginationResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.get_receipts_id_line_items(
                receipt_id="receipt_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_receipts_id_line_items(
            receipt_id,
            order=order,
            limit=limit,
            pagination_token=pagination_token,
            sort=sort,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            name=name,
            name_iexact=name_iexact,
            name_contains=name_contains,
            name_icontains=name_icontains,
            total_gt=total_gt,
            total_lt=total_lt,
            total_gte=total_gte,
            total_lte=total_lte,
            created_by_user_id=created_by_user_id,
            request_options=request_options,
        )
        return _response.data

    async def post_receipts_id_line_items(
        self,
        receipt_id: str,
        *,
        accounting_tax_rate_id: typing.Optional[str] = OMIT,
        cost_center_id: typing.Optional[str] = OMIT,
        general_ledger_id: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        total: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptLineItemResponseSchema:
        """
        Parameters
        ----------
        receipt_id : str

        accounting_tax_rate_id : typing.Optional[str]
            Accounting tax rate ID.

        cost_center_id : typing.Optional[str]
            Cost center ID.

        general_ledger_id : typing.Optional[str]
            General ledger ID.

        name : typing.Optional[str]
            Line item name/description.

        total : typing.Optional[int]
            Line item total in minor units.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptLineItemResponseSchema
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.post_receipts_id_line_items(
                receipt_id="receipt_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.post_receipts_id_line_items(
            receipt_id,
            accounting_tax_rate_id=accounting_tax_rate_id,
            cost_center_id=cost_center_id,
            general_ledger_id=general_ledger_id,
            name=name,
            total=total,
            request_options=request_options,
        )
        return _response.data

    async def delete_receipts_id_line_items_id(
        self, receipt_id: str, line_item_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        receipt_id : str

        line_item_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.delete_receipts_id_line_items_id(
                receipt_id="receipt_id",
                line_item_id="line_item_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_receipts_id_line_items_id(
            receipt_id, line_item_id, request_options=request_options
        )
        return _response.data

    async def patch_receipts_id_line_items_id(
        self,
        receipt_id: str,
        line_item_id: str,
        *,
        accounting_tax_rate_id: typing.Optional[str] = OMIT,
        cost_center_id: typing.Optional[str] = OMIT,
        general_ledger_id: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        total: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ReceiptLineItemResponseSchema:
        """
        Parameters
        ----------
        receipt_id : str

        line_item_id : str

        accounting_tax_rate_id : typing.Optional[str]
            Accounting tax rate ID.

        cost_center_id : typing.Optional[str]
            Cost center ID.

        general_ledger_id : typing.Optional[str]
            General ledger ID.

        name : typing.Optional[str]
            Line item name/description.

        total : typing.Optional[int]
            Line item total in minor units.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ReceiptLineItemResponseSchema
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.receipts.patch_receipts_id_line_items_id(
                receipt_id="receipt_id",
                line_item_id="line_item_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.patch_receipts_id_line_items_id(
            receipt_id,
            line_item_id,
            accounting_tax_rate_id=accounting_tax_rate_id,
            cost_center_id=cost_center_id,
            general_ledger_id=general_ledger_id,
            name=name,
            total=total,
            request_options=request_options,
        )
        return _response.data
