# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .status_enum import StatusEnum


class EntityUserResponse(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    A unique Monite-assigned ID of this entity user. Can be used with `POST /auth/token` to generate an API access token for this user.
    """

    created_at: dt.datetime = pydantic.Field()
    """
    UTC date and time when this user was created in Monite.
    """

    updated_at: dt.datetime = pydantic.Field()
    """
    UTC date and time when this user was last updated.
    """

    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user's business email address.
    """

    first_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user's first name.
    """

    last_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user's last name.
    """

    login: str = pydantic.Field()
    """
    The username assigned to this user. Usernames must be unique within the entity.
    
    The `login` value is not used by Monite but may be used by partner applications, for example, to map the users between the partner's platform and Monite.
    """

    phone: typing.Optional[str] = pydantic.Field(default=None)
    """
    The user's phone number.
    """

    role_id: str = pydantic.Field()
    """
    ID of the role assigned to this user. The role defines the user's [access permissions](https://docs.monite.com/api/concepts/authentication#permissions) within the entity. Each user has just one role.
    """

    status: StatusEnum = pydantic.Field()
    """
    The user's status. Always `active`.
    """

    userpic_file_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unused. Reserved for future use. Currently always returns `null`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
