# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import datetime as dt
from .entity_address_response_schema import EntityAddressResponseSchema
import typing
from .individual_response_schema import IndividualResponseSchema
from .file_schema3 import FileSchema3
from .entity_status_enum import EntityStatusEnum
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class EntityIndividualResponse(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    UUID entity ID
    """

    created_at: dt.datetime = pydantic.Field()
    """
    UTC datetime
    """

    updated_at: dt.datetime = pydantic.Field()
    """
    UTC datetime
    """

    address: EntityAddressResponseSchema = pydantic.Field()
    """
    An address description of the entity
    """

    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    An official email address of the entity
    """

    individual: IndividualResponseSchema = pydantic.Field()
    """
    A set of metadata describing an individual
    """

    logo: typing.Optional[FileSchema3] = pydantic.Field(default=None)
    """
    A logo image of the entity
    """

    phone: typing.Optional[str] = pydantic.Field(default=None)
    """
    A phone number of the entity
    """

    status: EntityStatusEnum = pydantic.Field()
    """
    record status, 'active' by default
    """

    tax_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The entity's taxpayer identification number or tax ID. This field is required for entities that are non-VAT registered.
    """

    website: typing.Optional[str] = pydantic.Field(default=None)
    """
    A website of the entity
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
