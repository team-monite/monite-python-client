# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from .payable_payment_term_discount import PayablePaymentTermDiscount
from ..core.serialization import FieldMetadata
from .payable_payment_term_final import PayablePaymentTermFinal
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class PayablePaymentTermsCreatePayload(UniversalBaseModel):
    description: typing.Optional[str] = None
    name: str
    term1: typing_extensions.Annotated[typing.Optional[PayablePaymentTermDiscount], FieldMetadata(alias="term_1")] = (
        None
    )
    term2: typing_extensions.Annotated[typing.Optional[PayablePaymentTermDiscount], FieldMetadata(alias="term_2")] = (
        None
    )
    term_final: PayablePaymentTermFinal

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
