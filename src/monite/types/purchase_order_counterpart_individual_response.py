# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class PurchaseOrderCounterpartIndividualResponse(UniversalBaseModel):
    """
    Represents counterparts that are individuals (natural persons).
    """

    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The person's email address.
    """

    first_name: str = pydantic.Field()
    """
    The person's first name.
    """

    is_customer: bool = pydantic.Field()
    """
    Indicates if the counterpart is a customer.
    """

    is_vendor: bool = pydantic.Field()
    """
    Indicates if the counterpart is a vendor.
    """

    last_name: str = pydantic.Field()
    """
    The person's last name.
    """

    phone: typing.Optional[str] = pydantic.Field(default=None)
    """
    The person's phone number.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    The person's title or honorific. Examples: Mr., Ms., Dr., Prof.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
