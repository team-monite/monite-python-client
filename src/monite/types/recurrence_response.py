# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .automation_level import AutomationLevel
from .day_of_month import DayOfMonth
from .recipients import Recipients
from .recurrence_frequency import RecurrenceFrequency
from .recurrence_iteration import RecurrenceIteration
from .recurrence_status import RecurrenceStatus


class RecurrenceResponse(UniversalBaseModel):
    id: str
    created_at: dt.datetime = pydantic.Field()
    """
    Time at which the recurrence was created. Timestamps follow the ISO 8601 standard.
    """

    updated_at: dt.datetime = pydantic.Field()
    """
    Time at which the recurrence was last updated. Timestamps follow the ISO 8601 standard.
    """

    automation_level: AutomationLevel = pydantic.Field()
    """
    Controls how invoices are processed when generated:
    - "draft": Creates invoices in draft status, requiring manual review, issuing, and sending
    - "issue": Automatically issues invoices but requires manual sending
    - "issue_and_send": Fully automates the process (creates, issues, and sends invoices)
    
    Default: "issue" (or "issue_and_send" if subject_text and body_text are provided)
    
    Note: When using "issue_and_send", both subject_text and body_text must be provided.
    """

    body_text: typing.Optional[str] = pydantic.Field(default=None)
    """
    The body text for the email that will be sent with the recurring invoice.
    """

    current_iteration: int = pydantic.Field()
    """
    Current iteration number
    """

    day_of_month: DayOfMonth = pydantic.Field()
    """
    Deprecated, use `start_date` instead
    """

    end_date: typing.Optional[str] = pydantic.Field(default=None)
    """
    The end date of the recurring invoice, in the `yyyy-mm-dd` format. The end date is inclusive, that is, the last invoice will be created on this date if the last occurrence falls on this date. `end_date` is mutually exclusive with `max_occurrences`. Either `end_date` or `max_occurrences` must be specified.
    """

    end_month: typing.Optional[int] = pydantic.Field(default=None)
    """
    Deprecated, use `end_date` instead
    """

    end_year: typing.Optional[int] = pydantic.Field(default=None)
    """
    Deprecated, use `end_date` instead
    """

    frequency: RecurrenceFrequency = pydantic.Field()
    """
    How often the invoice will be created.
    """

    interval: int = pydantic.Field()
    """
    The interval between each occurrence of the invoice. For example, when using monthly frequency, an interval of 1 means invoices will be created every month, an interval of 2 means invoices will be created every 2 months.
    """

    invoice_id: str = pydantic.Field()
    """
    ID of the base invoice that will be used as a template for creating recurring invoices.
    """

    iterations: typing.List[RecurrenceIteration] = pydantic.Field()
    """
    List of iterations for the recurrence
    """

    max_occurrences: typing.Optional[int] = pydantic.Field(default=None)
    """
    How many times the recurring invoice will be created. The recurrence will stop after this number is reached. `max_occurrences` is mutually exclusive with `end_date`. Either `max_occurrences` or `end_date` must be specified.
    """

    recipients: typing.Optional[Recipients] = pydantic.Field(default=None)
    """
    An object containing the recipients (To, CC, BCC) of the recurring invoices. Can be omitted if the base invoice has the counterpart contact email specified in the `counterpart_contact.email` field.
    """

    start_date: str = pydantic.Field()
    """
    The date when the first invoice will be created, in the `yyyy-mm-dd` format. Cannot be a past date. Subsequent invoice dates will be calculated based on `start_date`, `frequency`, and `interval`.
    """

    start_month: int = pydantic.Field()
    """
    Deprecated, use `start_date` instead
    """

    start_year: int = pydantic.Field()
    """
    Deprecated, use `start_date` instead
    """

    status: RecurrenceStatus = pydantic.Field()
    """
    Status of the recurrence
    """

    subject_text: typing.Optional[str] = pydantic.Field(default=None)
    """
    The subject for the email that will be sent with the recurring invoice.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
