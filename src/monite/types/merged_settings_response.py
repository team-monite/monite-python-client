# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .accounting_settings import AccountingSettings
import pydantic
from .api_version import ApiVersion
from .currency_settings import CurrencySettings
from .document_i_ds_settings import DocumentIDsSettings
from .e_invoicing_settings_payload import EInvoicingSettingsPayload
from .language_code_enum import LanguageCodeEnum
from .mail_settings_payload import MailSettingsPayload
from .payable_settings_payload import PayableSettingsPayload
from .ocr_auto_tagging_settings_request import OcrAutoTaggingSettingsRequest
from .payment_priority_enum import PaymentPriorityEnum
from .payments_settings_payload import PaymentsSettingsPayload
from .receivable_settings_payload import ReceivableSettingsPayload
from .receivable_edit_flow import ReceivableEditFlow
from .reminders_settings import RemindersSettings
from .unit import Unit
from .vat_mode_enum import VatModeEnum
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class MergedSettingsResponse(UniversalBaseModel):
    accounting: typing.Optional[AccountingSettings] = pydantic.Field(default=None)
    """
    Settings for the accounting module.
    """

    allow_purchase_order_autolinking: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Automatically attempt to find a corresponding purchase order for all incoming payables.
    """

    api_version: typing.Optional[ApiVersion] = pydantic.Field(default=None)
    """
    Default API version for partner.
    """

    commercial_conditions: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Commercial conditions for receivables.
    """

    currency: typing.Optional[CurrencySettings] = pydantic.Field(default=None)
    """
    Custom currency exchange rates.
    """

    default_role: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    A default role to provision upon new entity creation.
    """

    document_ids: typing.Optional[DocumentIDsSettings] = None
    einvoicing: typing.Optional[EInvoicingSettingsPayload] = pydantic.Field(default=None)
    """
    Settings for the e-invoicing module.
    """

    generate_paid_invoice_pdf: typing.Optional[bool] = pydantic.Field(default=None)
    """
    If enabled, the paid invoice's PDF will be in a new layout set by the user
    """

    language: typing.Optional[LanguageCodeEnum] = None
    mail: typing.Optional[MailSettingsPayload] = pydantic.Field(default=None)
    """
    Settings for email and mailboxes.
    """

    payable: typing.Optional[PayableSettingsPayload] = pydantic.Field(default=None)
    """
    Settings for the payables module.
    """

    payables_ocr_auto_tagging: typing.Optional[typing.List[OcrAutoTaggingSettingsRequest]] = pydantic.Field(
        default=None
    )
    """
    Auto tagging settings for all incoming OCR payable documents.
    """

    payment_priority: typing.Optional[PaymentPriorityEnum] = pydantic.Field(default=None)
    """
    Payment preferences for entity to automate calculating suggested payment date basing on payment terms and entity preferences
    """

    payments: typing.Optional[PaymentsSettingsPayload] = pydantic.Field(default=None)
    """
    Settings for the payments module.
    """

    quote_signature_required: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Sets the default behavior of whether a signature is required to accept quotes
    """

    receivable: typing.Optional[ReceivableSettingsPayload] = pydantic.Field(default=None)
    """
    Settings for the receivables module.
    """

    receivable_edit_flow: typing.Optional[ReceivableEditFlow] = None
    reminder: typing.Optional[RemindersSettings] = None
    units: typing.Optional[typing.List[Unit]] = pydantic.Field(default=None)
    """
    Measurement units.
    """

    vat_mode: typing.Optional[VatModeEnum] = pydantic.Field(default=None)
    """
    Defines whether the prices of products in receivables will already include VAT or not.
    """

    website: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
