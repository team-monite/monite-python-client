# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .receivables_representation_of_counterpart_address import ReceivablesRepresentationOfCounterpartAddress


class ReceivableCounterpartContact(UniversalBaseModel):
    address: ReceivablesRepresentationOfCounterpartAddress = pydantic.Field()
    """
    The contact address of the counterpart
    """

    email: typing.Optional[str] = pydantic.Field(default=None)
    """
    The contact email of the counterpart.
    """

    first_name: str = pydantic.Field()
    """
    The first name of the counterpart contact.
    """

    last_name: str = pydantic.Field()
    """
    The last name of the counterpart contact.
    """

    phone: typing.Optional[str] = pydantic.Field(default=None)
    """
    The contact phone number of the counterpart.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    The counterpart contact title (e.g. Dr., Mr., Mrs., Ms., etc).
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
