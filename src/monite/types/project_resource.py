# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .tag_read_schema import TagReadSchema


class ProjectResource(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    A unique ID assigned to this project.
    """

    created_at: dt.datetime = pydantic.Field()
    """
    UTC date and time when this project was created.
    """

    updated_at: dt.datetime = pydantic.Field()
    """
    UTC date and time when this project was last updated.
    """

    code: typing.Optional[str] = pydantic.Field(default=None)
    """
    A user-defined identifier of this project.
    """

    color: typing.Optional[str] = pydantic.Field(default=None)
    """
    Project color as a [CSS-compatible](https://developer.mozilla.org/en-US/docs/Web/CSS/color) value. Client applications can use this to color-code the projects or project-related data.
    """

    created_by_entity_user_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the entity user who created this project, or `null` if it was created using a partner access token.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    A user-defined description of the project.
    """

    end_date: typing.Optional[str] = pydantic.Field(default=None)
    """
    Project end date.
    """

    entity_id: str = pydantic.Field()
    """
    ID of the entity that owns this project.
    """

    name: str = pydantic.Field()
    """
    The project name.
    """

    parent_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unused. Reserved for future use.
    """

    partner_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    [Metadata](https://docs.monite.com/common/metadata) for partner needs.
    """

    start_date: typing.Optional[str] = pydantic.Field(default=None)
    """
    Project start date.
    """

    tags: typing.Optional[typing.List[TagReadSchema]] = pydantic.Field(default=None)
    """
    A list of user-defined tags (labels) assigned to this project.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
