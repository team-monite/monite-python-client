# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .line_item_column_settings import LineItemColumnSettings
from .line_item_numeric_column_settings import LineItemNumericColumnSettings


class LineItemsRenderingSettings(UniversalBaseModel):
    discount: typing.Optional[LineItemColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the discount column in the line items table.
    """

    measure_unit: typing.Optional[LineItemColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the measure unit column in the line items table.
    """

    name: typing.Optional[LineItemColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the name column in the line items table.
    """

    price: typing.Optional[LineItemNumericColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the price column in the line items table.
    """

    price_after_vat: typing.Optional[LineItemNumericColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the price after VAT column in the line items table.
    """

    quantity: typing.Optional[LineItemColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the quantity column in the line items table.
    """

    total_price: typing.Optional[LineItemNumericColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the total price column in the line items table.
    """

    total_price_after_vat: typing.Optional[LineItemNumericColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the total price after VAT column in the line items table.
    """

    vat_amount: typing.Optional[LineItemNumericColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the VAT amount column in the line items table.
    """

    vat_rate: typing.Optional[LineItemNumericColumnSettings] = pydantic.Field(default=None)
    """
    Settings for the VAT rate column in the line items table.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
