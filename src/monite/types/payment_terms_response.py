# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .term_discount_days import TermDiscountDays
from .term_final_days import TermFinalDays


class PaymentTermsResponse(UniversalBaseModel):
    id: str
    description: typing.Optional[str] = None
    name: str
    term1: typing_extensions.Annotated[typing.Optional[TermDiscountDays], FieldMetadata(alias="term_1")] = (
        pydantic.Field(default=None)
    )
    """
    The first tier of the payment term. Represents the terms of the first early discount.
    """

    term2: typing_extensions.Annotated[typing.Optional[TermDiscountDays], FieldMetadata(alias="term_2")] = (
        pydantic.Field(default=None)
    )
    """
    The second tier of the payment term. Defines the terms of the second early discount.
    """

    term_final: TermFinalDays = pydantic.Field()
    """
    The final tier of the payment term. Defines the invoice due date.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
