# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .currency_enum import CurrencyEnum
from .source_of_receipt_data_enum import SourceOfReceiptDataEnum


class ReceiptResponseSchema(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    Unique receipt ID.
    """

    created_at: dt.datetime = pydantic.Field()
    """
    Creation timestamp.
    """

    updated_at: dt.datetime = pydantic.Field()
    """
    Update timestamp.
    """

    created_by_entity_user_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Entity user who created.
    """

    currency: typing.Optional[CurrencyEnum] = pydantic.Field(default=None)
    """
    Currency code.
    """

    currency_exchange: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Currency exchange details.
    """

    document_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Receipt number.
    """

    file_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The id of the receipt file stored in the file saver.
    """

    file_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    The URL of the receipt file stored in the file saver.
    """

    issued_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Date when the receipt was issued.
    """

    merchant_location: typing.Optional[str] = pydantic.Field(default=None)
    """
    Merchant location.
    """

    merchant_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Merchant name.
    """

    ocr_request_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    OCR request id.
    """

    ocr_status: typing.Optional[str] = pydantic.Field(default=None)
    """
    OCR status.
    """

    partner_metadata: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Partner metadata.
    """

    source_of_data: typing.Optional[SourceOfReceiptDataEnum] = pydantic.Field(default=None)
    """
    Source of data.
    """

    total_amount: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total amount in minor units.
    """

    transaction_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Transaction ID.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
