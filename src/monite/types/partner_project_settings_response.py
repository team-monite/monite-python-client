# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .accounting_settings_response import AccountingSettingsResponse
import pydantic
from .api_version import ApiVersion
from .currency_settings import CurrencySettings
from .e_invoicing_settings_response import EInvoicingSettingsResponse
from .mail_settings_response import MailSettingsResponse
from .payable_settings_response import PayableSettingsResponse
from .payments_settings_response import PaymentsSettingsResponse
from .receivable_settings_response import ReceivableSettingsResponse
from .unit import Unit
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class PartnerProjectSettingsResponse(UniversalBaseModel):
    accounting: typing.Optional[AccountingSettingsResponse] = pydantic.Field(default=None)
    """
    Settings for the accounting module.
    """

    api_version: typing.Optional[ApiVersion] = pydantic.Field(default=None)
    """
    Default API version for partner.
    """

    commercial_conditions: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Commercial conditions for receivables.
    """

    currency: typing.Optional[CurrencySettings] = pydantic.Field(default=None)
    """
    Custom currency exchange rates.
    """

    default_role: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    A default role to provision upon new entity creation.
    """

    einvoicing: typing.Optional[EInvoicingSettingsResponse] = pydantic.Field(default=None)
    """
    Settings for the e-invoicing module.
    """

    mail: typing.Optional[MailSettingsResponse] = pydantic.Field(default=None)
    """
    Settings for email and mailboxes.
    """

    payable: typing.Optional[PayableSettingsResponse] = pydantic.Field(default=None)
    """
    Settings for the payables module.
    """

    payments: typing.Optional[PaymentsSettingsResponse] = pydantic.Field(default=None)
    """
    Settings for the payments module.
    """

    receivable: typing.Optional[ReceivableSettingsResponse] = pydantic.Field(default=None)
    """
    Settings for the receivables module.
    """

    units: typing.Optional[typing.List[Unit]] = pydantic.Field(default=None)
    """
    Measurement units.
    """

    website: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
