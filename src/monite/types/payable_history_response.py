# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .payable_history_event_type_enum import PayableHistoryEventTypeEnum
from .payable_history_response_event_data import PayableHistoryResponseEventData


class PayableHistoryResponse(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    A unique ID of the history record.
    """

    entity_user_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the entity user who made the change or trigger the event, or `null` if it was done by using a partner access token.
    """

    event_data: PayableHistoryResponseEventData = pydantic.Field()
    """
    An object containing additional information about the event or change. The object structure varies based on the `event_type`. 
    """

    event_type: PayableHistoryEventTypeEnum = pydantic.Field()
    """
    The type of the event or change.
    """

    payable_id: str = pydantic.Field()
    """
    ID of the payable document that was changed or triggered an event.
    """

    timestamp: dt.datetime = pydantic.Field()
    """
    UTC date and time when the event or change occurred.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
