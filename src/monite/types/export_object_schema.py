# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .payable_state_enum import PayableStateEnum
from .receivables_status_enum import ReceivablesStatusEnum


class ExportObjectSchema_Payable(UniversalBaseModel):
    name: typing.Literal["payable"] = "payable"
    statuses: typing.List[PayableStateEnum]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class ExportObjectSchema_Receivable(UniversalBaseModel):
    name: typing.Literal["receivable"] = "receivable"
    statuses: typing.List[ReceivablesStatusEnum]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


ExportObjectSchema = typing.Union[ExportObjectSchema_Payable, ExportObjectSchema_Receivable]
