# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import datetime as dt
import typing
from .line_item_product_measure_unit import LineItemProductMeasureUnit
from .price import Price
from .product_service_type_enum import ProductServiceTypeEnum
from .line_item_product_vat_rate import LineItemProductVatRate
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class LineItemProduct(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    Unique ID of the product.
    """

    created_at: dt.datetime = pydantic.Field()
    """
    Time at which the product was created. Timestamps follow the ISO 8601 standard.
    """

    updated_at: dt.datetime = pydantic.Field()
    """
    Time at which the product was last updated. Timestamps follow the ISO 8601 standard.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description of the product.
    """

    entity_id: str
    entity_user_id: typing.Optional[str] = None
    is_inline: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the product is inline
    """

    ledger_account_id: typing.Optional[str] = None
    measure_unit: typing.Optional[LineItemProductMeasureUnit] = None
    measure_unit_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    The unique ID reference of the unit used to measure the quantity of this product (e.g. items, meters, kilograms).
    """

    name: str = pydantic.Field()
    """
    Name of the product.
    """

    price: Price
    price_after_vat: Price
    smallest_amount: typing.Optional[float] = pydantic.Field(default=None)
    """
    The smallest amount allowed for this product.
    """

    type: typing.Optional[ProductServiceTypeEnum] = pydantic.Field(default=None)
    """
    Specifies whether this offering is a product or service. This may affect the applicable tax rates.
    """

    vat_rate: LineItemProductVatRate

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
