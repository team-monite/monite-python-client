# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.counterpart_einvoicing_credential_existence_response import (
    CounterpartEinvoicingCredentialExistenceResponse,
)
from ..types.einvoice_schema_type_enum import EinvoiceSchemaTypeEnum
from .raw_client import AsyncRawEInvoicingSearchClient, RawEInvoicingSearchClient


class EInvoicingSearchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawEInvoicingSearchClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawEInvoicingSearchClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawEInvoicingSearchClient
        """
        return self._raw_client

    def get_einvoice_search(
        self,
        *,
        network_identifier: str,
        network_schema: EinvoiceSchemaTypeEnum,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CounterpartEinvoicingCredentialExistenceResponse:
        """
        Checks if the specified VAT number or business number is registered on the PEPPOL network as a receiver. For example, you can use this endpoint to check if an entity's counterparts are registered in PEPPOL before creating e-invoices for those counterparts.

        The lookup is powered by PEPPOL SMPs (Service Metadata Publishers) so it also includes registrations that are not visible in the public PEPPOL directory.

        Both partner tokens and entity user tokens can be used for authentication.

        Production and sandbox lookups are separate.

        Parameters
        ----------
        network_identifier : str
            VAT number or business number, depending on the `network_schema` used. VAT numbers must include the country prefix, for example, use `DE010101010` not `10101010`.

            **Note:** This endpoint does not validate the format of VAT numbers and business numbers (such as the length or characters used). Invalid values will return `{"exists": false}`.

        network_schema : EinvoiceSchemaTypeEnum
            [PEPPOL scheme](https://docs.monite.com/e-invoicing/peppol-ids#schemes) name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CounterpartEinvoicingCredentialExistenceResponse
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.e_invoicing_search.get_einvoice_search(
            network_identifier="DE010101010",
            network_schema="DE:VAT",
        )
        """
        _response = self._raw_client.get_einvoice_search(
            network_identifier=network_identifier, network_schema=network_schema, request_options=request_options
        )
        return _response.data


class AsyncEInvoicingSearchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawEInvoicingSearchClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawEInvoicingSearchClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawEInvoicingSearchClient
        """
        return self._raw_client

    async def get_einvoice_search(
        self,
        *,
        network_identifier: str,
        network_schema: EinvoiceSchemaTypeEnum,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CounterpartEinvoicingCredentialExistenceResponse:
        """
        Checks if the specified VAT number or business number is registered on the PEPPOL network as a receiver. For example, you can use this endpoint to check if an entity's counterparts are registered in PEPPOL before creating e-invoices for those counterparts.

        The lookup is powered by PEPPOL SMPs (Service Metadata Publishers) so it also includes registrations that are not visible in the public PEPPOL directory.

        Both partner tokens and entity user tokens can be used for authentication.

        Production and sandbox lookups are separate.

        Parameters
        ----------
        network_identifier : str
            VAT number or business number, depending on the `network_schema` used. VAT numbers must include the country prefix, for example, use `DE010101010` not `10101010`.

            **Note:** This endpoint does not validate the format of VAT numbers and business numbers (such as the length or characters used). Invalid values will return `{"exists": false}`.

        network_schema : EinvoiceSchemaTypeEnum
            [PEPPOL scheme](https://docs.monite.com/e-invoicing/peppol-ids#schemes) name.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CounterpartEinvoicingCredentialExistenceResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.e_invoicing_search.get_einvoice_search(
                network_identifier="DE010101010",
                network_schema="DE:VAT",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_einvoice_search(
            network_identifier=network_identifier, network_schema=network_schema, request_options=request_options
        )
        return _response.data
