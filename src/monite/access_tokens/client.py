# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.access_token_response import AccessTokenResponse
from ..types.grant_type import GrantType
from ..types.message_response import MessageResponse
from .raw_client import AsyncRawAccessTokensClient, RawAccessTokensClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AccessTokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAccessTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAccessTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAccessTokensClient
        """
        return self._raw_client

    def revoke(
        self, *, client_id: str, client_secret: str, token: str, request_options: typing.Optional[RequestOptions] = None
    ) -> MessageResponse:
        """
        Revoke an existing token immediately.

        Parameters
        ----------
        client_id : str
            Your partner [client ID](https://docs.monite.com/get-started/credentials#get-credentials) obtained from the "API Credentials" section of Monite Partner Portal. Note that the sandbox and production environment use different client IDs.

        client_secret : str
            Your partner [client secret](https://docs.monite.com/get-started/credentials#get-credentials) obtained from the "API Credentials" section of Monite Partner Portal. Note that the sandbox and production environment use different client secrets.

        token : str
            The token to revoke.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MessageResponse
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.access_tokens.revoke(
            client_id="client_id",
            client_secret="client_secret",
            token="token",
        )
        """
        _response = self._raw_client.revoke(
            client_id=client_id, client_secret=client_secret, token=token, request_options=request_options
        )
        return _response.data

    def create(
        self,
        *,
        client_id: str,
        client_secret: str,
        grant_type: GrantType,
        entity_user_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccessTokenResponse:
        """
        Create a new access token based on client ID and client secret.

        Parameters
        ----------
        client_id : str
            Your partner [client ID](https://docs.monite.com/get-started/credentials#get-credentials) obtained from the "API Credentials" section of Monite Partner Portal. Note that the sandbox and production environment use different client IDs.

        client_secret : str
            Your partner [client secret](https://docs.monite.com/get-started/credentials#get-credentials) obtained from the "API Credentials" section of Monite Partner Portal. Note that the sandbox and production environment use different client secrets.

        grant_type : GrantType
            The type of the access token to generate:

             * `client_credentials` - partner-level access token,
             * `entity_user` - entity user token.

        entity_user_id : typing.Optional[str]
            ID of the entity user to generate the access token for. Used only if `grant_type` is `entity_user`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccessTokenResponse
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.access_tokens.create(
            client_id="eb959578-a74d-4ac3-8b25-bf0910027857",
            client_secret="14c84a34-282b-4fd8-8af6-86b5b5f2c212",
            grant_type="client_credentials",
        )
        """
        _response = self._raw_client.create(
            client_id=client_id,
            client_secret=client_secret,
            grant_type=grant_type,
            entity_user_id=entity_user_id,
            request_options=request_options,
        )
        return _response.data


class AsyncAccessTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAccessTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAccessTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAccessTokensClient
        """
        return self._raw_client

    async def revoke(
        self, *, client_id: str, client_secret: str, token: str, request_options: typing.Optional[RequestOptions] = None
    ) -> MessageResponse:
        """
        Revoke an existing token immediately.

        Parameters
        ----------
        client_id : str
            Your partner [client ID](https://docs.monite.com/get-started/credentials#get-credentials) obtained from the "API Credentials" section of Monite Partner Portal. Note that the sandbox and production environment use different client IDs.

        client_secret : str
            Your partner [client secret](https://docs.monite.com/get-started/credentials#get-credentials) obtained from the "API Credentials" section of Monite Partner Portal. Note that the sandbox and production environment use different client secrets.

        token : str
            The token to revoke.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MessageResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.access_tokens.revoke(
                client_id="client_id",
                client_secret="client_secret",
                token="token",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.revoke(
            client_id=client_id, client_secret=client_secret, token=token, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        client_id: str,
        client_secret: str,
        grant_type: GrantType,
        entity_user_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccessTokenResponse:
        """
        Create a new access token based on client ID and client secret.

        Parameters
        ----------
        client_id : str
            Your partner [client ID](https://docs.monite.com/get-started/credentials#get-credentials) obtained from the "API Credentials" section of Monite Partner Portal. Note that the sandbox and production environment use different client IDs.

        client_secret : str
            Your partner [client secret](https://docs.monite.com/get-started/credentials#get-credentials) obtained from the "API Credentials" section of Monite Partner Portal. Note that the sandbox and production environment use different client secrets.

        grant_type : GrantType
            The type of the access token to generate:

             * `client_credentials` - partner-level access token,
             * `entity_user` - entity user token.

        entity_user_id : typing.Optional[str]
            ID of the entity user to generate the access token for. Used only if `grant_type` is `entity_user`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccessTokenResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.access_tokens.create(
                client_id="eb959578-a74d-4ac3-8b25-bf0910027857",
                client_secret="14c84a34-282b-4fd8-8af6-86b5b5f2c212",
                grant_type="client_credentials",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            client_id=client_id,
            client_secret=client_secret,
            grant_type=grant_type,
            entity_user_id=entity_user_id,
            request_options=request_options,
        )
        return _response.data
