# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.forbidden_error import ForbiddenError
from ..errors.not_found_error import NotFoundError
from ..errors.too_many_requests_error import TooManyRequestsError
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.product_service_type_enum import ProductServiceTypeEnum
from ..types.vat_rate_list_response import VatRateListResponse


class RawVatRatesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self,
        *,
        counterpart_address_id: typing.Optional[str] = None,
        counterpart_id: typing.Optional[str] = None,
        counterpart_vat_id_id: typing.Optional[str] = None,
        entity_vat_id_id: typing.Optional[str] = None,
        product_type: typing.Optional[ProductServiceTypeEnum] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[VatRateListResponse]:
        """
        Monite maintains a catalog of VAT and sales tax rates for [select countries](https://docs.monite.com/accounts-receivable/vat-rates#supported-countries).

        To query the applicable VAT/tax rates for an invoice or quote, use:

        `GET /vat_rates?counterpart_id=<...>&entity_vat_id_id=<...>`

        Or if the entity does not have a VAT ID:

        `GET /vat_rates?counterpart_id=<...>`

        **Note:** Entities from countries [not on the list](https://docs.monite.com/accounts-receivable/vat-rates#supported-countries) should not use this endpoint. Instead, those entities can either create custom VAT/tax rates or use the invoice field `line_items[].tax_rate_value` to specify the VAT/tax rates directly.

        Parameters
        ----------
        counterpart_address_id : typing.Optional[str]
            Unused. Reserved for future use.

        counterpart_id : typing.Optional[str]
            ID of the counterpart that will be invoiced.

        counterpart_vat_id_id : typing.Optional[str]
            Unused. Reserved for future use.

        entity_vat_id_id : typing.Optional[str]
            ID of the entity's VAT number (if any) used for the sales transaction.

        product_type : typing.Optional[ProductServiceTypeEnum]
            Unused. Reserved for future use.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[VatRateListResponse]
            Successful Response
        """
        _response = self._client_wrapper.httpx_client.request(
            "vat_rates",
            method="GET",
            params={
                "counterpart_address_id": counterpart_address_id,
                "counterpart_id": counterpart_id,
                "counterpart_vat_id_id": counterpart_vat_id_id,
                "entity_vat_id_id": entity_vat_id_id,
                "product_type": product_type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    VatRateListResponse,
                    parse_obj_as(
                        type_=VatRateListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawVatRatesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self,
        *,
        counterpart_address_id: typing.Optional[str] = None,
        counterpart_id: typing.Optional[str] = None,
        counterpart_vat_id_id: typing.Optional[str] = None,
        entity_vat_id_id: typing.Optional[str] = None,
        product_type: typing.Optional[ProductServiceTypeEnum] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[VatRateListResponse]:
        """
        Monite maintains a catalog of VAT and sales tax rates for [select countries](https://docs.monite.com/accounts-receivable/vat-rates#supported-countries).

        To query the applicable VAT/tax rates for an invoice or quote, use:

        `GET /vat_rates?counterpart_id=<...>&entity_vat_id_id=<...>`

        Or if the entity does not have a VAT ID:

        `GET /vat_rates?counterpart_id=<...>`

        **Note:** Entities from countries [not on the list](https://docs.monite.com/accounts-receivable/vat-rates#supported-countries) should not use this endpoint. Instead, those entities can either create custom VAT/tax rates or use the invoice field `line_items[].tax_rate_value` to specify the VAT/tax rates directly.

        Parameters
        ----------
        counterpart_address_id : typing.Optional[str]
            Unused. Reserved for future use.

        counterpart_id : typing.Optional[str]
            ID of the counterpart that will be invoiced.

        counterpart_vat_id_id : typing.Optional[str]
            Unused. Reserved for future use.

        entity_vat_id_id : typing.Optional[str]
            ID of the entity's VAT number (if any) used for the sales transaction.

        product_type : typing.Optional[ProductServiceTypeEnum]
            Unused. Reserved for future use.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[VatRateListResponse]
            Successful Response
        """
        _response = await self._client_wrapper.httpx_client.request(
            "vat_rates",
            method="GET",
            params={
                "counterpart_address_id": counterpart_address_id,
                "counterpart_id": counterpart_id,
                "counterpart_vat_id_id": counterpart_vat_id_id,
                "entity_vat_id_id": entity_vat_id_id,
                "product_type": product_type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    VatRateListResponse,
                    parse_obj_as(
                        type_=VatRateListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        typing.Optional[typing.Any],
                        parse_obj_as(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
