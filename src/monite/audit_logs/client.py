# This file was auto-generated by Fern from our API Definition.

from ..core.client_wrapper import SyncClientWrapper
import typing
from ..types.log_type_enum import LogTypeEnum
from ..types.log_method_enum import LogMethodEnum
import datetime as dt
from ..core.request_options import RequestOptions
from ..types.logs_response import LogsResponse
from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..errors.internal_server_error import InternalServerError
from ..types.error_schema_response import ErrorSchemaResponse
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.log_response import LogResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper


class AuditLogsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self,
        *,
        pagination_token: typing.Optional[str] = None,
        entity_user_id: typing.Optional[str] = None,
        path_contains: typing.Optional[str] = None,
        type: typing.Optional[LogTypeEnum] = None,
        method: typing.Optional[LogMethodEnum] = None,
        status_code: typing.Optional[int] = None,
        timestamp_gt: typing.Optional[dt.datetime] = None,
        timestamp_lt: typing.Optional[dt.datetime] = None,
        timestamp_gte: typing.Optional[dt.datetime] = None,
        timestamp_lte: typing.Optional[dt.datetime] = None,
        page_size: typing.Optional[int] = None,
        page_num: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LogsResponse:
        """
        Parameters
        ----------
        pagination_token : typing.Optional[str]

        entity_user_id : typing.Optional[str]

        path_contains : typing.Optional[str]

        type : typing.Optional[LogTypeEnum]

        method : typing.Optional[LogMethodEnum]

        status_code : typing.Optional[int]

        timestamp_gt : typing.Optional[dt.datetime]

        timestamp_lt : typing.Optional[dt.datetime]

        timestamp_gte : typing.Optional[dt.datetime]

        timestamp_lte : typing.Optional[dt.datetime]

        page_size : typing.Optional[int]

        page_num : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LogsResponse
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.audit_logs.get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "audit_logs",
            method="GET",
            params={
                "pagination_token": pagination_token,
                "entity_user_id": entity_user_id,
                "path__contains": path_contains,
                "type": type,
                "method": method,
                "status_code": status_code,
                "timestamp__gt": serialize_datetime(timestamp_gt) if timestamp_gt is not None else None,
                "timestamp__lt": serialize_datetime(timestamp_lt) if timestamp_lt is not None else None,
                "timestamp__gte": serialize_datetime(timestamp_gte) if timestamp_gte is not None else None,
                "timestamp__lte": serialize_datetime(timestamp_lte) if timestamp_lte is not None else None,
                "page_size": page_size,
                "page_num": page_num,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LogsResponse,
                    parse_obj_as(
                        type_=LogsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        ErrorSchemaResponse,
                        parse_obj_as(
                            type_=ErrorSchemaResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_by_id(self, log_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> LogResponse:
        """
        Parameters
        ----------
        log_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LogResponse
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.audit_logs.get_by_id(
            log_id="log_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"audit_logs/{jsonable_encoder(log_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LogResponse,
                    parse_obj_as(
                        type_=LogResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        ErrorSchemaResponse,
                        parse_obj_as(
                            type_=ErrorSchemaResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAuditLogsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self,
        *,
        pagination_token: typing.Optional[str] = None,
        entity_user_id: typing.Optional[str] = None,
        path_contains: typing.Optional[str] = None,
        type: typing.Optional[LogTypeEnum] = None,
        method: typing.Optional[LogMethodEnum] = None,
        status_code: typing.Optional[int] = None,
        timestamp_gt: typing.Optional[dt.datetime] = None,
        timestamp_lt: typing.Optional[dt.datetime] = None,
        timestamp_gte: typing.Optional[dt.datetime] = None,
        timestamp_lte: typing.Optional[dt.datetime] = None,
        page_size: typing.Optional[int] = None,
        page_num: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LogsResponse:
        """
        Parameters
        ----------
        pagination_token : typing.Optional[str]

        entity_user_id : typing.Optional[str]

        path_contains : typing.Optional[str]

        type : typing.Optional[LogTypeEnum]

        method : typing.Optional[LogMethodEnum]

        status_code : typing.Optional[int]

        timestamp_gt : typing.Optional[dt.datetime]

        timestamp_lt : typing.Optional[dt.datetime]

        timestamp_gte : typing.Optional[dt.datetime]

        timestamp_lte : typing.Optional[dt.datetime]

        page_size : typing.Optional[int]

        page_num : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LogsResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.audit_logs.get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "audit_logs",
            method="GET",
            params={
                "pagination_token": pagination_token,
                "entity_user_id": entity_user_id,
                "path__contains": path_contains,
                "type": type,
                "method": method,
                "status_code": status_code,
                "timestamp__gt": serialize_datetime(timestamp_gt) if timestamp_gt is not None else None,
                "timestamp__lt": serialize_datetime(timestamp_lt) if timestamp_lt is not None else None,
                "timestamp__gte": serialize_datetime(timestamp_gte) if timestamp_gte is not None else None,
                "timestamp__lte": serialize_datetime(timestamp_lte) if timestamp_lte is not None else None,
                "page_size": page_size,
                "page_num": page_num,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LogsResponse,
                    parse_obj_as(
                        type_=LogsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        ErrorSchemaResponse,
                        parse_obj_as(
                            type_=ErrorSchemaResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_by_id(self, log_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> LogResponse:
        """
        Parameters
        ----------
        log_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LogResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.audit_logs.get_by_id(
                log_id="log_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"audit_logs/{jsonable_encoder(log_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LogResponse,
                    parse_obj_as(
                        type_=LogResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        ErrorSchemaResponse,
                        parse_obj_as(
                            type_=ErrorSchemaResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
