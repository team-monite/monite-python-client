# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.api_version import ApiVersion
from ..types.currency_settings_input import CurrencySettingsInput
from ..types.mail_settings import MailSettings
from ..types.partner_project_settings_payload_output import PartnerProjectSettingsPayloadOutput
from ..types.payable_settings import PayableSettings
from ..types.payments_settings_input import PaymentsSettingsInput
from ..types.receivable_settings import ReceivableSettings
from ..types.unit import Unit
from .raw_client import AsyncRawPartnerSettingsClient, RawPartnerSettingsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PartnerSettingsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPartnerSettingsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPartnerSettingsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPartnerSettingsClient
        """
        return self._raw_client

    def get(self, *, request_options: typing.Optional[RequestOptions] = None) -> PartnerProjectSettingsPayloadOutput:
        """
        Partner-level settings apply to all entities of that partner.

        See also:

         * [Get entity settings](https://docs.monite.com/api/entities/get-entities-id-settings)

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PartnerProjectSettingsPayloadOutput
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.partner_settings.get()
        """
        _response = self._raw_client.get(request_options=request_options)
        return _response.data

    def update(
        self,
        *,
        api_version: typing.Optional[ApiVersion] = OMIT,
        commercial_conditions: typing.Optional[typing.Sequence[str]] = OMIT,
        currency: typing.Optional[CurrencySettingsInput] = OMIT,
        default_role: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        mail: typing.Optional[MailSettings] = OMIT,
        payable: typing.Optional[PayableSettings] = OMIT,
        payments: typing.Optional[PaymentsSettingsInput] = OMIT,
        receivable: typing.Optional[ReceivableSettings] = OMIT,
        units: typing.Optional[typing.Sequence[Unit]] = OMIT,
        website: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PartnerProjectSettingsPayloadOutput:
        """
        Partner-level settings apply to all entities of that partner.

        See also:

         * [Update entity settings](https://docs.monite.com/api/entities/patch-entities-id-settings)

        Parameters
        ----------
        api_version : typing.Optional[ApiVersion]
            Default API version for partner.

        commercial_conditions : typing.Optional[typing.Sequence[str]]
            Unused. To specify commercial conditions for invoices and quotes, use the `commercial_condition_description` field in those documents.

        currency : typing.Optional[CurrencySettingsInput]
            Custom currency exchange rates.

        default_role : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            A default role to provision upon new entity creation.

        mail : typing.Optional[MailSettings]
            Settings for outgoing email. Used by:

             * accounts receivable emails, for example, emails sent by `POST /recevables/{receivable_id}/send`,
             * accounts payable approval notifications.

        payable : typing.Optional[PayableSettings]
            Settings for accounts payable.

        payments : typing.Optional[PaymentsSettingsInput]
            Settings for the payments module.

        receivable : typing.Optional[ReceivableSettings]
            Settings for accounts receivable.

        units : typing.Optional[typing.Sequence[Unit]]
            Unused. To manage the [measure units](https://docs.monite.com/accounts-receivable/products#manage-measure-units) for your entities, use the `/measure_units` endpoints.

        website : typing.Optional[str]
            The URL of the partner's website. Must be an HTTPS URL. Required if the partner's entities use [payment links](https://docs.monite.com/payments/payment-links). The "Powered by" badge in the payment page footer will link to this website.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PartnerProjectSettingsPayloadOutput
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.partner_settings.update()
        """
        _response = self._raw_client.update(
            api_version=api_version,
            commercial_conditions=commercial_conditions,
            currency=currency,
            default_role=default_role,
            mail=mail,
            payable=payable,
            payments=payments,
            receivable=receivable,
            units=units,
            website=website,
            request_options=request_options,
        )
        return _response.data


class AsyncPartnerSettingsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPartnerSettingsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPartnerSettingsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPartnerSettingsClient
        """
        return self._raw_client

    async def get(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PartnerProjectSettingsPayloadOutput:
        """
        Partner-level settings apply to all entities of that partner.

        See also:

         * [Get entity settings](https://docs.monite.com/api/entities/get-entities-id-settings)

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PartnerProjectSettingsPayloadOutput
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.partner_settings.get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get(request_options=request_options)
        return _response.data

    async def update(
        self,
        *,
        api_version: typing.Optional[ApiVersion] = OMIT,
        commercial_conditions: typing.Optional[typing.Sequence[str]] = OMIT,
        currency: typing.Optional[CurrencySettingsInput] = OMIT,
        default_role: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        mail: typing.Optional[MailSettings] = OMIT,
        payable: typing.Optional[PayableSettings] = OMIT,
        payments: typing.Optional[PaymentsSettingsInput] = OMIT,
        receivable: typing.Optional[ReceivableSettings] = OMIT,
        units: typing.Optional[typing.Sequence[Unit]] = OMIT,
        website: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PartnerProjectSettingsPayloadOutput:
        """
        Partner-level settings apply to all entities of that partner.

        See also:

         * [Update entity settings](https://docs.monite.com/api/entities/patch-entities-id-settings)

        Parameters
        ----------
        api_version : typing.Optional[ApiVersion]
            Default API version for partner.

        commercial_conditions : typing.Optional[typing.Sequence[str]]
            Unused. To specify commercial conditions for invoices and quotes, use the `commercial_condition_description` field in those documents.

        currency : typing.Optional[CurrencySettingsInput]
            Custom currency exchange rates.

        default_role : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            A default role to provision upon new entity creation.

        mail : typing.Optional[MailSettings]
            Settings for outgoing email. Used by:

             * accounts receivable emails, for example, emails sent by `POST /recevables/{receivable_id}/send`,
             * accounts payable approval notifications.

        payable : typing.Optional[PayableSettings]
            Settings for accounts payable.

        payments : typing.Optional[PaymentsSettingsInput]
            Settings for the payments module.

        receivable : typing.Optional[ReceivableSettings]
            Settings for accounts receivable.

        units : typing.Optional[typing.Sequence[Unit]]
            Unused. To manage the [measure units](https://docs.monite.com/accounts-receivable/products#manage-measure-units) for your entities, use the `/measure_units` endpoints.

        website : typing.Optional[str]
            The URL of the partner's website. Must be an HTTPS URL. Required if the partner's entities use [payment links](https://docs.monite.com/payments/payment-links). The "Powered by" badge in the payment page footer will link to this website.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PartnerProjectSettingsPayloadOutput
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.partner_settings.update()


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            api_version=api_version,
            commercial_conditions=commercial_conditions,
            currency=currency,
            default_role=default_role,
            mail=mail,
            payable=payable,
            payments=payments,
            receivable=receivable,
            units=units,
            website=website,
            request_options=request_options,
        )
        return _response.data
