# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.order_enum import OrderEnum
from ..types.webhook_object_type import WebhookObjectType
from ..types.webhook_subscription_cursor_fields import WebhookSubscriptionCursorFields
from ..types.webhook_subscription_pagination_resource import WebhookSubscriptionPaginationResource
from ..types.webhook_subscription_resource import WebhookSubscriptionResource
from ..types.webhook_subscription_resource_with_secret import WebhookSubscriptionResourceWithSecret
from .raw_client import AsyncRawWebhookSubscriptionsClient, RawWebhookSubscriptionsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WebhookSubscriptionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawWebhookSubscriptionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawWebhookSubscriptionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawWebhookSubscriptionsClient
        """
        return self._raw_client

    def get(
        self,
        *,
        order: typing.Optional[OrderEnum] = None,
        limit: typing.Optional[int] = None,
        pagination_token: typing.Optional[str] = None,
        sort: typing.Optional[WebhookSubscriptionCursorFields] = None,
        object_type: typing.Optional[WebhookObjectType] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_gte: typing.Optional[dt.datetime] = None,
        created_at_lte: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookSubscriptionPaginationResource:
        """
        Returns a list of all [webhook](https://docs.monite.com/references/webhooks/index) subscriptions (both active and disabled).

        Parameters
        ----------
        order : typing.Optional[OrderEnum]
            Sort order (ascending by default). Typically used together with the `sort` parameter.

        limit : typing.Optional[int]
            The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.

        pagination_token : typing.Optional[str]
            A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.

            If not specified, the first page of results will be returned.

        sort : typing.Optional[WebhookSubscriptionCursorFields]
            The field to sort the results by. Typically used together with the `order` parameter.

        object_type : typing.Optional[WebhookObjectType]

        created_at_gt : typing.Optional[dt.datetime]
            Return only subscriptions created after the specified date and time.

        created_at_lt : typing.Optional[dt.datetime]
            Return only subscriptions created before the specified date and time.

        created_at_gte : typing.Optional[dt.datetime]
            Return only subscriptions created on or after the specified date and time.

        created_at_lte : typing.Optional[dt.datetime]
            Return only subscriptions created before or on the specified date and time.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionPaginationResource
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.webhook_subscriptions.get()
        """
        _response = self._raw_client.get(
            order=order,
            limit=limit,
            pagination_token=pagination_token,
            sort=sort,
            object_type=object_type,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            request_options=request_options,
        )
        return _response.data

    def create(
        self,
        *,
        object_type: WebhookObjectType,
        url: str,
        event_types: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookSubscriptionResourceWithSecret:
        """
        Related guide: [Webhooks](https://docs.monite.com/references/webhooks/index).

        Parameters
        ----------
        object_type : WebhookObjectType
            The [object type](https://docs.monite.com/references/webhooks/index#events) to whose events you want to subscribe.

            To subscribe to events from multiple object types, create a separate subscription for each object type.

        url : str
            An HTTPS URL to which Monite will send webhooks. This URL must be accessible over the public Internet, accept POST requests, and respond with status code 200. It must be a direct URL (no redirects).

            The same URL can be used by multiple webhook subscriptions.

        event_types : typing.Optional[typing.Sequence[str]]
            A list of [events](https://docs.monite.com/references/webhooks/index#events) to subscribe to. If set to an empty array, the subscription includes all events triggered by the specified `object_type`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResourceWithSecret
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.webhook_subscriptions.create(
            event_types=[
                "created",
                "onboarding_requirements.updated",
                "onboarding_requirements.status_updated",
            ],
            object_type="entity",
            url="https://example.com/your-webhook-listener",
        )
        """
        _response = self._raw_client.create(
            object_type=object_type, url=url, event_types=event_types, request_options=request_options
        )
        return _response.data

    def get_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookSubscriptionResource:
        """
        Returns the details of the webhook subscription with the specified ID.

        The response does not include the [webhook signing secret](https://docs.monite.com/references/webhooks/signatures). If you lost the secret, you can [regenerate it](https://docs.monite.com/api/webhook-subscriptions/post-webhook-subscriptions-id-regenerate-secret).

        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResource
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.webhook_subscriptions.get_by_id(
            webhook_subscription_id="webhook_subscription_id",
        )
        """
        _response = self._raw_client.get_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data

    def delete_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.webhook_subscriptions.delete_by_id(
            webhook_subscription_id="webhook_subscription_id",
        )
        """
        _response = self._raw_client.delete_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data

    def update_by_id(
        self,
        webhook_subscription_id: str,
        *,
        event_types: typing.Optional[typing.Sequence[str]] = OMIT,
        object_type: typing.Optional[WebhookObjectType] = OMIT,
        url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookSubscriptionResource:
        """
        You can update the webhook listener URL or the event list.

        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        event_types : typing.Optional[typing.Sequence[str]]
            A list of [events](https://docs.monite.com/references/webhooks/index#events) to subscribe to. If set to an empty array, the subscription includes all events triggered by the specified `object_type`.

        object_type : typing.Optional[WebhookObjectType]
            The [object type](https://docs.monite.com/references/webhooks/index#events) to whose events you want to subscribe.

            To subscribe to events from multiple object types, create a separate subscription for each object type.

        url : typing.Optional[str]
            An HTTPS URL to which Monite will send webhooks. This URL must be accessible over the public Internet, accept POST requests, and respond with status code 200. It must be a direct URL (no redirects).

            The same URL can be used by multiple webhook subscriptions.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResource
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.webhook_subscriptions.update_by_id(
            webhook_subscription_id="webhook_subscription_id",
        )
        """
        _response = self._raw_client.update_by_id(
            webhook_subscription_id,
            event_types=event_types,
            object_type=object_type,
            url=url,
            request_options=request_options,
        )
        return _response.data

    def disable_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookSubscriptionResource:
        """
        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResource
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.webhook_subscriptions.disable_by_id(
            webhook_subscription_id="webhook_subscription_id",
        )
        """
        _response = self._raw_client.disable_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data

    def enable_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookSubscriptionResource:
        """
        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResource
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.webhook_subscriptions.enable_by_id(
            webhook_subscription_id="webhook_subscription_id",
        )
        """
        _response = self._raw_client.enable_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data

    def regenerate_secret_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookSubscriptionResourceWithSecret:
        """
        The webhook signing secret lets you [verify webhook signatures](https://docs.monite.com/references/webhooks/signatures). If you lost the original secret generated for any of your webhook subscriptions, you can regenerate it.

        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResourceWithSecret
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.webhook_subscriptions.regenerate_secret_by_id(
            webhook_subscription_id="webhook_subscription_id",
        )
        """
        _response = self._raw_client.regenerate_secret_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data


class AsyncWebhookSubscriptionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawWebhookSubscriptionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawWebhookSubscriptionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawWebhookSubscriptionsClient
        """
        return self._raw_client

    async def get(
        self,
        *,
        order: typing.Optional[OrderEnum] = None,
        limit: typing.Optional[int] = None,
        pagination_token: typing.Optional[str] = None,
        sort: typing.Optional[WebhookSubscriptionCursorFields] = None,
        object_type: typing.Optional[WebhookObjectType] = None,
        created_at_gt: typing.Optional[dt.datetime] = None,
        created_at_lt: typing.Optional[dt.datetime] = None,
        created_at_gte: typing.Optional[dt.datetime] = None,
        created_at_lte: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookSubscriptionPaginationResource:
        """
        Returns a list of all [webhook](https://docs.monite.com/references/webhooks/index) subscriptions (both active and disabled).

        Parameters
        ----------
        order : typing.Optional[OrderEnum]
            Sort order (ascending by default). Typically used together with the `sort` parameter.

        limit : typing.Optional[int]
            The number of items (0 .. 100) to return in a single page of the response. The response may contain fewer items if it is the last or only page.

        pagination_token : typing.Optional[str]
            A pagination token obtained from a previous call to this endpoint. Use it to get the next or previous page of results for your initial query. If `pagination_token` is specified, all other query parameters are ignored and inferred from the initial query.

            If not specified, the first page of results will be returned.

        sort : typing.Optional[WebhookSubscriptionCursorFields]
            The field to sort the results by. Typically used together with the `order` parameter.

        object_type : typing.Optional[WebhookObjectType]

        created_at_gt : typing.Optional[dt.datetime]
            Return only subscriptions created after the specified date and time.

        created_at_lt : typing.Optional[dt.datetime]
            Return only subscriptions created before the specified date and time.

        created_at_gte : typing.Optional[dt.datetime]
            Return only subscriptions created on or after the specified date and time.

        created_at_lte : typing.Optional[dt.datetime]
            Return only subscriptions created before or on the specified date and time.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionPaginationResource
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook_subscriptions.get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get(
            order=order,
            limit=limit,
            pagination_token=pagination_token,
            sort=sort,
            object_type=object_type,
            created_at_gt=created_at_gt,
            created_at_lt=created_at_lt,
            created_at_gte=created_at_gte,
            created_at_lte=created_at_lte,
            request_options=request_options,
        )
        return _response.data

    async def create(
        self,
        *,
        object_type: WebhookObjectType,
        url: str,
        event_types: typing.Optional[typing.Sequence[str]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookSubscriptionResourceWithSecret:
        """
        Related guide: [Webhooks](https://docs.monite.com/references/webhooks/index).

        Parameters
        ----------
        object_type : WebhookObjectType
            The [object type](https://docs.monite.com/references/webhooks/index#events) to whose events you want to subscribe.

            To subscribe to events from multiple object types, create a separate subscription for each object type.

        url : str
            An HTTPS URL to which Monite will send webhooks. This URL must be accessible over the public Internet, accept POST requests, and respond with status code 200. It must be a direct URL (no redirects).

            The same URL can be used by multiple webhook subscriptions.

        event_types : typing.Optional[typing.Sequence[str]]
            A list of [events](https://docs.monite.com/references/webhooks/index#events) to subscribe to. If set to an empty array, the subscription includes all events triggered by the specified `object_type`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResourceWithSecret
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook_subscriptions.create(
                event_types=[
                    "created",
                    "onboarding_requirements.updated",
                    "onboarding_requirements.status_updated",
                ],
                object_type="entity",
                url="https://example.com/your-webhook-listener",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            object_type=object_type, url=url, event_types=event_types, request_options=request_options
        )
        return _response.data

    async def get_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookSubscriptionResource:
        """
        Returns the details of the webhook subscription with the specified ID.

        The response does not include the [webhook signing secret](https://docs.monite.com/references/webhooks/signatures). If you lost the secret, you can [regenerate it](https://docs.monite.com/api/webhook-subscriptions/post-webhook-subscriptions-id-regenerate-secret).

        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResource
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook_subscriptions.get_by_id(
                webhook_subscription_id="webhook_subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data

    async def delete_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook_subscriptions.delete_by_id(
                webhook_subscription_id="webhook_subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data

    async def update_by_id(
        self,
        webhook_subscription_id: str,
        *,
        event_types: typing.Optional[typing.Sequence[str]] = OMIT,
        object_type: typing.Optional[WebhookObjectType] = OMIT,
        url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WebhookSubscriptionResource:
        """
        You can update the webhook listener URL or the event list.

        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        event_types : typing.Optional[typing.Sequence[str]]
            A list of [events](https://docs.monite.com/references/webhooks/index#events) to subscribe to. If set to an empty array, the subscription includes all events triggered by the specified `object_type`.

        object_type : typing.Optional[WebhookObjectType]
            The [object type](https://docs.monite.com/references/webhooks/index#events) to whose events you want to subscribe.

            To subscribe to events from multiple object types, create a separate subscription for each object type.

        url : typing.Optional[str]
            An HTTPS URL to which Monite will send webhooks. This URL must be accessible over the public Internet, accept POST requests, and respond with status code 200. It must be a direct URL (no redirects).

            The same URL can be used by multiple webhook subscriptions.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResource
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook_subscriptions.update_by_id(
                webhook_subscription_id="webhook_subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_by_id(
            webhook_subscription_id,
            event_types=event_types,
            object_type=object_type,
            url=url,
            request_options=request_options,
        )
        return _response.data

    async def disable_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookSubscriptionResource:
        """
        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResource
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook_subscriptions.disable_by_id(
                webhook_subscription_id="webhook_subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.disable_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data

    async def enable_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookSubscriptionResource:
        """
        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResource
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook_subscriptions.enable_by_id(
                webhook_subscription_id="webhook_subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.enable_by_id(webhook_subscription_id, request_options=request_options)
        return _response.data

    async def regenerate_secret_by_id(
        self, webhook_subscription_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WebhookSubscriptionResourceWithSecret:
        """
        The webhook signing secret lets you [verify webhook signatures](https://docs.monite.com/references/webhooks/signatures). If you lost the original secret generated for any of your webhook subscriptions, you can regenerate it.

        Parameters
        ----------
        webhook_subscription_id : str
            ID of the webhook subscription. This is the same value as the `webhook_subscription_id` you receive in webhooks.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WebhookSubscriptionResourceWithSecret
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.webhook_subscriptions.regenerate_secret_by_id(
                webhook_subscription_id="webhook_subscription_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.regenerate_secret_by_id(
            webhook_subscription_id, request_options=request_options
        )
        return _response.data
