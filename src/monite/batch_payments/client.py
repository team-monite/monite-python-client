# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.single_payment_intent import SinglePaymentIntent
from ..core.request_options import RequestOptions
from ..types.payments_batch_payment_response import PaymentsBatchPaymentResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from ..errors.internal_server_error import InternalServerError
from ..types.error_schema_response import ErrorSchemaResponse
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BatchPaymentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        payer_bank_account_id: str,
        payment_intents: typing.Sequence[SinglePaymentIntent],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentsBatchPaymentResponse:
        """
        Parameters
        ----------
        payer_bank_account_id : str

        payment_intents : typing.Sequence[SinglePaymentIntent]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentsBatchPaymentResponse
            Successful Response

        Examples
        --------
        from monite import (
            Monite,
            PaymentIntentsRecipient,
            PaymentObjectPayable,
            SinglePaymentIntent,
        )

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.batch_payments.create(
            payer_bank_account_id="payer_bank_account_id",
            payment_intents=[
                SinglePaymentIntent(
                    object=PaymentObjectPayable(
                        id="id",
                    ),
                    recipient=PaymentIntentsRecipient(
                        id="id",
                    ),
                )
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "batch_payments",
            method="POST",
            json={
                "payer_bank_account_id": payer_bank_account_id,
                "payment_intents": convert_and_respect_annotation_metadata(
                    object_=payment_intents, annotation=typing.Sequence[SinglePaymentIntent], direction="write"
                ),
                "payment_method": "us_ach",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaymentsBatchPaymentResponse,
                    parse_obj_as(
                        type_=PaymentsBatchPaymentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        ErrorSchemaResponse,
                        parse_obj_as(
                            type_=ErrorSchemaResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_by_id(
        self, batch_payment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentsBatchPaymentResponse:
        """
        Parameters
        ----------
        batch_payment_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentsBatchPaymentResponse
            Successful Response

        Examples
        --------
        from monite import Monite

        client = Monite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )
        client.batch_payments.get_by_id(
            batch_payment_id="batch_payment_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"batch_payments/{jsonable_encoder(batch_payment_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaymentsBatchPaymentResponse,
                    parse_obj_as(
                        type_=PaymentsBatchPaymentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        ErrorSchemaResponse,
                        parse_obj_as(
                            type_=ErrorSchemaResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBatchPaymentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        payer_bank_account_id: str,
        payment_intents: typing.Sequence[SinglePaymentIntent],
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaymentsBatchPaymentResponse:
        """
        Parameters
        ----------
        payer_bank_account_id : str

        payment_intents : typing.Sequence[SinglePaymentIntent]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentsBatchPaymentResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import (
            AsyncMonite,
            PaymentIntentsRecipient,
            PaymentObjectPayable,
            SinglePaymentIntent,
        )

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.batch_payments.create(
                payer_bank_account_id="payer_bank_account_id",
                payment_intents=[
                    SinglePaymentIntent(
                        object=PaymentObjectPayable(
                            id="id",
                        ),
                        recipient=PaymentIntentsRecipient(
                            id="id",
                        ),
                    )
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "batch_payments",
            method="POST",
            json={
                "payer_bank_account_id": payer_bank_account_id,
                "payment_intents": convert_and_respect_annotation_metadata(
                    object_=payment_intents, annotation=typing.Sequence[SinglePaymentIntent], direction="write"
                ),
                "payment_method": "us_ach",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaymentsBatchPaymentResponse,
                    parse_obj_as(
                        type_=PaymentsBatchPaymentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        ErrorSchemaResponse,
                        parse_obj_as(
                            type_=ErrorSchemaResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_by_id(
        self, batch_payment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PaymentsBatchPaymentResponse:
        """
        Parameters
        ----------
        batch_payment_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaymentsBatchPaymentResponse
            Successful Response

        Examples
        --------
        import asyncio

        from monite import AsyncMonite

        client = AsyncMonite(
            monite_version="YOUR_MONITE_VERSION",
            monite_entity_id="YOUR_MONITE_ENTITY_ID",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.batch_payments.get_by_id(
                batch_payment_id="batch_payment_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"batch_payments/{jsonable_encoder(batch_payment_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaymentsBatchPaymentResponse,
                    parse_obj_as(
                        type_=PaymentsBatchPaymentResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(
                        ErrorSchemaResponse,
                        parse_obj_as(
                            type_=ErrorSchemaResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
